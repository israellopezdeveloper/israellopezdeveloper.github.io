import { useState, useEffect, useRef, useCallback } from 'react'
import * as THREE from 'three'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
import { loadGLTFModel } from '../libs/model'
import { KoalaSpinner, KoalaContainer } from './voxel-koala-loader'

function easeOutCirc(x) {
  return Math.sqrt(1 - Math.pow(x - 1, 4))
}

const VoxelKoala = () => {
  const refContainer = useRef()
  const [loading, setLoading] = useState(true)
  const refRenderer = useRef()
  // TODO cambiar la URL
  const urlKoalaGLB = (process.env.NODE_ENV === 'production' ? 'urls' : '') + '/koala.glb'

  const handleWindowResize = useCallback(() => {
    const { current: renderer } = refRenderer
    const { current: container } = refContainer
    if (container && renderer) {
      const scW = container.clientWidth
      const scH = container.clientHeight

      renderer.setSize(scW, scH)
    }
  }, [])

  /* eslint-disable react-hooks/exhaustive-deps */
  useEffect(() => {
    const { current: container } = refContainer
    if (container) {
      const scW = container.clientWidth
      const scH = container.clientHeight

      const renderer = new THREE.WebGLRenderer({
        antialias: true,
        alpha: true
      })
      renderer.setPixelRatio(window.devicePixelRatio)
      renderer.setSize(scW, scH)
      renderer.outputEncoding = THREE.sRGBEncoding
      container.appendChild(renderer.domElement)
      refRenderer.current = renderer
      const scene = new THREE.Scene()

      const target = new THREE.Vector3(0, 0, 0)
      const initialCameraPosition = new THREE.Vector3(
        5,
        5,
        5
      )

      const scale = scW / scH
      const camera = new THREE.PerspectiveCamera(75, scale, 0.1, 1000)
      camera.position.copy(initialCameraPosition)
      camera.lookAt(target)

      const ambientLight = new THREE.AmbientLight(0xcccccc, Math.PI)
      scene.add(ambientLight)

      renderer.render(scene, camera)

      //const controls = new OrbitControls(camera, renderer.domElement)
      //controls.autoRotate = true
      //controls.target = target
      //
      loadGLTFModel(scene, urlKoalaGLB, {
        receiveShadow: false,
        castShadow: true
      }).then(() => {
        //animate()
        setLoading(false)
      })
      camera.lookAt(target)
      //
      //let req = null
      //let frame = 0
      //const animate = () => {
      //  req = requestAnimationFrame(animate)
      //
      //  frame = frame <= 100 ? frame + 1 : frame
      //
      //  if (frame <= 100) {
      //    const p = initialCameraPosition
      //    const rotSpeed = -easeOutCirc(frame / 120) * Math.PI * 20
      //
      //    camera.position.y = 10
      //    camera.position.x =
      //      p.x * Math.cos(rotSpeed) + p.z * Math.sin(rotSpeed)
      //    camera.position.z =
      //      p.z * Math.cos(rotSpeed) - p.x * Math.sin(rotSpeed)
      //    camera.lookAt(target)
      //  } else {
      //    controls.update()
      //  }
      //
      //  renderer.render(scene, camera)
      //}

      return () => {
        renderer.domElement.remove()
        renderer.dispose()
      }
    }
  }, [])

  useEffect(() => {
    window.addEventListener('resize', handleWindowResize, false)
    return () => {
      window.removeEventListener('resize', handleWindowResize, false)
    }
  }, [handleWindowResize])

  return (
    <KoalaContainer ref={refContainer} >{loading && <KoalaSpinner />}</KoalaContainer>
  )
}

export default VoxelKoala
