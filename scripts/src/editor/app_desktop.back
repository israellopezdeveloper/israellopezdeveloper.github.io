# app_desktop.py
from __future__ import annotations
import json
from pathlib import Path
from typing import Any, Optional, List

from PySide6 import QtCore, QtGui, QtWidgets

try:
    import jsonschema  # type: ignore

    HAS_JSONSCHEMA = True
except Exception:
    HAS_JSONSCHEMA = False

# Vista previa HTML (opcional)
try:
    from PySide6.QtWebEngineWidgets import QWebEngineView  # type: ignore

    HAS_WEB = True
except Exception:
    QWebEngineView = None  # type: ignore
    HAS_WEB = False


# ========================= Utilidades de IO ================================


def load_json(path: Path) -> Any:
    with path.open("r", encoding="utf-8") as f:
        return json.load(f)


def save_json(path: Path, data: Any) -> None:
    with path.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def ensure_paths(root: dict) -> None:
    if "intro" not in root or not isinstance(root["intro"], dict):
        root["intro"] = {
            "greeting": "",
            "profile_image": "",
            "name": "",
            "title": "",
            "summary": [],
            "bio": [],
            "hobbies": "",
            "links": [],
        }
    if "works" not in root or not isinstance(root["works"], list):
        root["works"] = []
    if "educations" not in root or not isinstance(root["educations"], dict):
        root["educations"] = {}


def safe(d: dict, k: str, default):
    v = d.get(k, default)
    return v if v is not None else default


def coerce_html(value: Any) -> str:
    """Acepta str o list[str] y devuelve un único string HTML."""
    if isinstance(value, list):
        # Une tal cual; si prefieres envolver cada item en <p>…</p>, descomenta la segunda línea.
        return "".join(str(x) for x in value if x is not None)
        # return "".join(f"<p>{x}</p>" for x in value if x)
    return str(value or "")


def enable_reorder(lw: QtWidgets.QListWidget) -> None:
    """Activa drag&drop para reordenar una QListWidget."""
    lw.setDragEnabled(True)
    lw.setAcceptDrops(True)
    lw.setDefaultDropAction(QtCore.Qt.DropAction.MoveAction)
    lw.setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode.InternalMove)
    lw.setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode.ExtendedSelection)


def ensure_educations_defaults(ed: dict | None) -> dict:
    """Garantiza estructura base en educations."""
    ed = ed or {}
    if "university" not in ed or not isinstance(ed["university"], list):
        ed["university"] = []
    if "complementary" not in ed or not isinstance(ed["complementary"], list):
        ed["complementary"] = []
    if "languages" not in ed or not isinstance(ed["languages"], list):
        ed["languages"] = []
    return ed


# ========================= Editor HTML básico ==============================


class HtmlEditor(QtWidgets.QWidget):
    textChanged = QtCore.Signal(str)

    def __init__(self, parent=None, show_preview=True):
        super().__init__(parent)
        self.show_preview = bool(show_preview and HAS_WEB)

        self.editor = QtWidgets.QPlainTextEdit(self)
        self.editor.setPlaceholderText("<p>Contenido HTML…</p>")
        self.editor.textChanged.connect(self._on_text_changed)

        toolbar = QtWidgets.QToolBar(self)
        act_b = QtGui.QAction("Negrita", self)
        act_b.triggered.connect(self._insert_bold)
        act_p = QtGui.QAction("<p>", self)
        act_p.triggered.connect(self._wrap_p)
        act_br = QtGui.QAction("<br/>", self)
        act_br.triggered.connect(lambda: self._insert_text("<br/>"))
        toolbar.addAction(act_b)
        toolbar.addAction(act_p)
        toolbar.addAction(act_br)

        layout = QtWidgets.QVBoxLayout(self)
        layout.addWidget(toolbar)

        if self.show_preview:
            splitter = QtWidgets.QSplitter(QtCore.Qt.Orientation.Horizontal, self)
            splitter.addWidget(self.editor)
            self.preview = QWebEngineView(self)  # type: ignore
            splitter.addWidget(self.preview)
            splitter.setStretchFactor(0, 3)
            splitter.setStretchFactor(1, 2)
            layout.addWidget(splitter)
        else:
            self.preview = None
            layout.addWidget(self.editor)

    def setHtml(self, html: str):
        self.editor.blockSignals(True)
        self.editor.setPlainText(html or "")
        self.editor.blockSignals(False)
        self._on_text_changed()

    def html(self) -> str:
        return self.editor.toPlainText()

    def _on_text_changed(self):
        html = self.editor.toPlainText()
        if self.preview:
            self.preview.setHtml(f"<!doctype html><meta charset='utf-8'><body>{html}</body>")
        self.textChanged.emit(html)

    def _insert_text(self, t: str):
        cur = self.editor.textCursor()
        cur.insertText(t)

    def _insert_bold(self):
        cur = self.editor.textCursor()
        sel = cur.selectedText() or "texto"
        cur.insertText(f"<b>{sel}</b>")

    def _wrap_p(self):
        cur = self.editor.textCursor()
        sel = cur.selectedText() or "texto"
        cur.insertText(f"<p>{sel}</p>")


# ========================= Diálogos pequeños ===============================


class FileSelect(QtWidgets.QWidget):
    valueChanged = QtCore.Signal(str)

    def __init__(self, _="Archivo", parent=None):
        super().__init__(parent)
        self.edit = QtWidgets.QLineEdit(self)
        btn = QtWidgets.QPushButton("…", self)
        btn.clicked.connect(self._pick)
        lay = QtWidgets.QHBoxLayout(self)
        lay.setContentsMargins(0, 0, 0, 0)
        lay.addWidget(self.edit)
        lay.addWidget(btn)
        self.edit.textChanged.connect(self.valueChanged)

    def setValue(self, v: str):
        self.edit.setText(v or "")

    def value(self) -> str:
        return self.edit.text().strip()

    def _pick(self):
        fn, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Seleccionar archivo", "", "Todos (*)")
        if fn:
            self.edit.setText(fn)


class LinkDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent)
        self.setWindowTitle("Añadir/Editar Link")
        form = QtWidgets.QFormLayout(self)
        self.edIcon = QtWidgets.QLineEdit()
        self.edUrl = QtWidgets.QLineEdit()
        self.edText = QtWidgets.QLineEdit()
        form.addRow("icon (emoji):", self.edIcon)
        form.addRow("url:", self.edUrl)
        form.addRow("text:", self.edText)
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        form.addRow(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)
        if value:
            self.edIcon.setText(value.get("icon", ""))
            self.edUrl.setText(value.get("url", ""))
            self.edText.setText(value.get("text", ""))

    def data(self) -> dict:
        return {
            "icon": self.edIcon.text().strip(),
            "url": self.edUrl.text().strip(),
            "text": self.edText.text().strip(),
        }


class BioDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent)
        self.setWindowTitle("Añadir/Editar Bio item")
        form = QtWidgets.QFormLayout(self)
        self.edDate = QtWidgets.QDateEdit(QtCore.QDate.currentDate())
        self.edDate.setCalendarPopup(True)
        self.edDate.setDisplayFormat("yyyy-MM-dd")
        self.edText = QtWidgets.QLineEdit()
        form.addRow("date:", self.edDate)
        form.addRow("text:", self.edText)
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        form.addRow(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)
        if value:
            # value["dates"] puede no ser ISO; dejamos input manual si no parsea
            self.edText.setText(value.get("text", ""))

    def data(self) -> dict:
        return {"dates": self.edDate.date().toString("yyyy"), "text": self.edText.text().strip()}


class HtmlItemDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, initial: str = "<p>...</p>", title="Editar HTML"):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.resize(800, 600)
        lay = QtWidgets.QVBoxLayout(self)
        self.html = HtmlEditor(self, show_preview=True)
        self.html.setHtml(initial or "")
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        lay.addWidget(self.html)
        lay.addWidget(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)

    def value(self) -> str:
        return self.html.html()


class TextDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, label="Texto", initial=""):
        super().__init__(parent)
        self.setWindowTitle("Añadir texto")
        form = QtWidgets.QFormLayout(self)
        self.ed = QtWidgets.QLineEdit()
        self.ed.setText(initial or "")
        form.addRow(label + ":", self.ed)
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        form.addRow(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)

    def value(self) -> str:
        return self.ed.text().strip()


# ========================= Diálogos EDUCATIONS ============================


class ImageItemDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, value: str = ""):
        super().__init__(parent)
        self.setWindowTitle("Imagen")
        form = QtWidgets.QFormLayout(self)
        self.file = FileSelect()
        self.file.setValue(value)
        form.addRow("archivo:", self.file)
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        form.addRow(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)

    def value(self) -> str:
        return self.file.value()


class AccreditationDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent)
        self.setWindowTitle("Acreditación")
        form = QtWidgets.QFormLayout(self)
        self.edInstitution = QtWidgets.QLineEdit()
        self.edTitle = QtWidgets.QLineEdit()
        self.edPeriod = QtWidgets.QLineEdit()
        form.addRow("institution:", self.edInstitution)
        form.addRow("title:", self.edTitle)
        form.addRow("period_time:", self.edPeriod)
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        form.addRow(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)
        if value:
            self.edInstitution.setText(value.get("institution", ""))
            self.edTitle.setText(value.get("title", ""))
            self.edPeriod.setText(value.get("period_time", ""))

    def data(self) -> dict:
        return {
            "institution": self.edInstitution.text().strip(),
            "title": self.edTitle.text().strip(),
            "period_time": self.edPeriod.text().strip(),
        }


class _BaseEduDialog(QtWidgets.QDialog):
    """Campos comunes: title/period/summary/images/thumbnail con nombre de entidad configurable."""

    def __init__(self, parent=None, value: Optional[dict] = None, name_label="university_name"):
        super().__init__(parent)
        self.resize(900, 700)
        lay = QtWidgets.QVBoxLayout(self)
        form = QtWidgets.QFormLayout()
        self.edName = QtWidgets.QLineEdit()
        self.edTitle = QtWidgets.QLineEdit()
        self.edPeriod = QtWidgets.QLineEdit()
        self.htmlSummary = HtmlEditor(show_preview=True)
        self.fileThumb = FileSelect()
        form.addRow(f"{name_label}:", self.edName)
        form.addRow("title:", self.edTitle)
        form.addRow("period_time:", self.edPeriod)
        form.addRow("summary (HTML):", self.htmlSummary)
        form.addRow("thumbnail:", self.fileThumb)
        lay.addLayout(form)
        # Images
        grpImg = QtWidgets.QGroupBox("images")
        v = QtWidgets.QVBoxLayout(grpImg)
        self.listImages = QtWidgets.QListWidget()
        enable_reorder(self.listImages)
        hb = QtWidgets.QHBoxLayout()
        bAdd = QtWidgets.QPushButton("+")
        bDel = QtWidgets.QPushButton("–")
        bEdit = QtWidgets.QPushButton("Editar…")
        bAdd.clicked.connect(self._img_add)
        bDel.clicked.connect(lambda: self._del_selected(self.listImages))
        bEdit.clicked.connect(self._img_edit)
        hb.addWidget(bAdd)
        hb.addWidget(bDel)
        hb.addWidget(bEdit)
        hb.addStretch(1)
        v.addWidget(self.listImages)
        v.addLayout(hb)
        lay.addWidget(grpImg)
        # Buttons
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        lay.addWidget(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)
        # Fill
        if value:
            self.edName.setText(value.get(name_label, ""))
            self.edTitle.setText(value.get("title", ""))
            self.edPeriod.setText(value.get("period_time", ""))
            self.htmlSummary.setHtml(coerce_html(value.get("summary", "")))
            self.fileThumb.setValue(value.get("thumbnail", ""))
            for img in value.get("images", []):
                self.listImages.addItem(str(img))
        self._name_label = name_label

    def _del_selected(self, lw: QtWidgets.QListWidget):
        for it in lw.selectedItems():
            lw.takeItem(lw.row(it))

    def _img_add(self):
        dlg = ImageItemDialog(self)
        if dlg.exec():
            self.listImages.addItem(dlg.value())

    def _img_edit(self):
        it = self.listImages.currentItem()
        if not it:
            return
        dlg = ImageItemDialog(self, it.text())
        if dlg.exec():
            it.setText(dlg.value())

    def data(self) -> dict:
        images = [self.listImages.item(i).text() for i in range(self.listImages.count())]
        return {
            self._name_label: self.edName.text().strip(),
            "title": self.edTitle.text().strip(),
            "period_time": self.edPeriod.text().strip(),
            "summary": self.htmlSummary.html(),
            "images": images,
            "thumbnail": self.fileThumb.value(),
        }


class UniversityItemDialog(_BaseEduDialog):
    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent, value, name_label="university_name")


class ComplementaryItemDialog(_BaseEduDialog):
    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent, value, name_label="institution")


class LanguageItemDialog(QtWidgets.QDialog):
    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent)
        self.setWindowTitle("Idioma")
        self.resize(800, 600)
        lay = QtWidgets.QVBoxLayout(self)
        form = QtWidgets.QFormLayout()
        self.edLanguage = QtWidgets.QLineEdit()
        self.edSpoken = QtWidgets.QLineEdit()
        self.edWriten = QtWidgets.QLineEdit()
        self.edRead = QtWidgets.QLineEdit()
        form.addRow("language:", self.edLanguage)
        form.addRow("spoken:", self.edSpoken)
        form.addRow("writen:", self.edWriten)
        form.addRow("read:", self.edRead)
        lay.addLayout(form)
        # Acreditations
        grpA = QtWidgets.QGroupBox("acreditations")
        v = QtWidgets.QVBoxLayout(grpA)
        self.listAcc = QtWidgets.QListWidget()
        enable_reorder(self.listAcc)
        hb = QtWidgets.QHBoxLayout()
        bAdd = QtWidgets.QPushButton("+")
        bDel = QtWidgets.QPushButton("–")
        bEdit = QtWidgets.QPushButton("Editar…")
        bAdd.clicked.connect(self._acc_add)
        bDel.clicked.connect(lambda: self._del_selected(self.listAcc))
        bEdit.clicked.connect(self._acc_edit)
        hb.addWidget(bAdd)
        hb.addWidget(bDel)
        hb.addWidget(bEdit)
        hb.addStretch(1)
        v.addWidget(self.listAcc)
        v.addLayout(hb)
        lay.addWidget(grpA)
        # Buttons
        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        lay.addWidget(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)
        # Fill
        if value:
            self.edLanguage.setText(value.get("language", ""))
            self.edSpoken.setText(value.get("spoken", ""))
            self.edWriten.setText(value.get("writen", ""))
            self.edRead.setText(value.get("read", ""))
            for a in value.get("acreditations", []):
                label = f"{a.get('institution', '')} | {a.get('title', '')} | {a.get('period_time', '')}"
                it = QtWidgets.QListWidgetItem(label)
                it.setData(QtCore.Qt.ItemDataRole.UserRole, a)
                self.listAcc.addItem(it)

    def _del_selected(self, lw: QtWidgets.QListWidget):
        for it in lw.selectedItems():
            lw.takeItem(lw.row(it))

    def _acc_add(self):
        dlg = AccreditationDialog(self)
        if dlg.exec():
            a = dlg.data()
            it = QtWidgets.QListWidgetItem(
                f"{a['institution']} | {a['title']} | {a['period_time']}"
            )
            it.setData(QtCore.Qt.ItemDataRole.UserRole, a)
            self.listAcc.addItem(it)

    def _acc_edit(self):
        it = self.listAcc.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = AccreditationDialog(self, prev)
        if dlg.exec():
            a = dlg.data()
            it.setText(f"{a['institution']} | {a['title']} | {a['period_time']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, a)

    def data(self) -> dict:
        acreditations: list[dict] = []
        for i in range(self.listAcc.count()):
            obj = self.listAcc.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                acreditations.append(obj)
        return {
            "language": self.edLanguage.text().strip(),
            "spoken": self.edSpoken.text().strip(),
            "writen": self.edWriten.text().strip(),
            "read": self.edRead.text().strip(),
            "acreditations": acreditations,
        }


# ========================= Tab: INTRO =====================================


class IntroTab(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data: dict[str, Any] = {}

        layout = QtWidgets.QVBoxLayout(self)
        tabs = QtWidgets.QTabWidget(self)
        layout.addWidget(tabs)

        # --- Básicos
        w_basic = QtWidgets.QWidget()
        f = QtWidgets.QFormLayout(w_basic)
        self.edGreeting = QtWidgets.QLineEdit()
        self.fileProfile = FileSelect()
        self.edName = QtWidgets.QLineEdit()
        self.edTitle = QtWidgets.QLineEdit()
        f.addRow("greeting:", self.edGreeting)
        f.addRow("profile_image:", self.fileProfile)
        f.addRow("name:", self.edName)
        f.addRow("title:", self.edTitle)

        # --- Summary: lista HTML (cada item en modal)
        w_summary = QtWidgets.QWidget()
        v = QtWidgets.QVBoxLayout(w_summary)
        self.listSummary = QtWidgets.QListWidget()
        btnAddS = QtWidgets.QPushButton("+")
        btnDelS = QtWidgets.QPushButton("–")
        btnEditS = QtWidgets.QPushButton("Editar HTML…")
        btnAddS.clicked.connect(self._summary_add)
        btnDelS.clicked.connect(lambda: self._del_selected(self.listSummary))
        btnEditS.clicked.connect(lambda: self._edit_html_item(self.listSummary))
        hb = QtWidgets.QHBoxLayout()
        hb.addWidget(btnAddS)
        hb.addWidget(btnDelS)
        hb.addWidget(btnEditS)
        hb.addStretch(1)
        v.addWidget(self.listSummary)
        v.addLayout(hb)

        # --- Bio: lista con modal (date + text)
        w_bio = QtWidgets.QWidget()
        vb = QtWidgets.QVBoxLayout(w_bio)
        self.listBio = QtWidgets.QListWidget()
        btnAddB = QtWidgets.QPushButton("+")
        btnDelB = QtWidgets.QPushButton("–")
        btnEditB = QtWidgets.QPushButton("Editar…")
        btnAddB.clicked.connect(self._bio_add)
        btnDelB.clicked.connect(lambda: self._del_selected(self.listBio))
        btnEditB.clicked.connect(self._bio_edit)
        hb2 = QtWidgets.QHBoxLayout()
        hb2.addWidget(btnAddB)
        hb2.addWidget(btnDelB)
        hb2.addWidget(btnEditB)
        hb2.addStretch(1)
        vb.addWidget(self.listBio)
        vb.addLayout(hb2)

        # --- Hobbies: HTML en bloque
        w_hobbies = QtWidgets.QWidget()
        vh = QtWidgets.QVBoxLayout(w_hobbies)
        self.hobbiesEditor = HtmlEditor(show_preview=True)
        vh.addWidget(self.hobbiesEditor)

        # --- Links: lista con modal (icon, url, text)
        w_links = QtWidgets.QWidget()
        vl = QtWidgets.QVBoxLayout(w_links)
        self.listLinks = QtWidgets.QListWidget()
        btnAddL = QtWidgets.QPushButton("+")
        btnDelL = QtWidgets.QPushButton("–")
        btnEditL = QtWidgets.QPushButton("Editar…")
        btnAddL.clicked.connect(self._link_add)
        btnDelL.clicked.connect(lambda: self._del_selected(self.listLinks))
        btnEditL.clicked.connect(self._link_edit)
        hb3 = QtWidgets.QHBoxLayout()
        hb3.addWidget(btnAddL)
        hb3.addWidget(btnDelL)
        hb3.addWidget(btnEditL)
        hb3.addStretch(1)
        vl.addWidget(self.listLinks)
        vl.addLayout(hb3)

        tabs.addTab(w_basic, "Básicos")
        tabs.addTab(w_summary, "Summary")
        tabs.addTab(w_bio, "Bio")
        tabs.addTab(w_hobbies, "Hobbies (HTML)")
        tabs.addTab(w_links, "Links")

        # botón aplicar cambios al objeto intro
        self.btnApply = QtWidgets.QPushButton("Aplicar cambios a intro")
        self.btnApply.clicked.connect(self.apply_to_data)
        layout.addWidget(self.btnApply)

    # Carga/guarda
    def load(self, intro: dict):
        self.data = intro
        self.edGreeting.setText(safe(intro, "greeting", ""))
        self.fileProfile.setValue(safe(intro, "profile_image", ""))
        self.edName.setText(safe(intro, "name", ""))
        self.edTitle.setText(safe(intro, "title", ""))

        self.listSummary.clear()
        for p in safe(intro, "summary", []):
            self.listSummary.addItem(str(p))

        self.listBio.clear()
        for item in safe(intro, "bio", []):
            txt = f"{item.get('dates', '')} — {item.get('text', '')}"
            self.listBio.addItem(txt)
            self.listBio.item(self.listBio.count() - 1).setData(
                QtCore.Qt.ItemDataRole.UserRole, item
            )

        hobbies_val = safe(intro, "hobbies", "")
        # Si viene como lista, la convertimos a un único string (puedes elegir el separador)
        if isinstance(hobbies_val, list):
            # Une elementos con saltos de línea o conviértelo a un <p>…</p> si prefieres:
            hobbies_val = "\n".join(str(x) for x in hobbies_val)
            # Si prefieres HTML puro:
            # hobbies_val = "".join(f"<p>{x}</p>" for x in hobbies_val)
            self.hobbiesEditor.setHtml(coerce_html(safe(intro, "hobbies", "")))

        self.listLinks.clear()
        for link in safe(intro, "links", []):
            label = f"{link.get('icon', '')} | {link.get('text', '')} | {link.get('url', '')}"
            it = QtWidgets.QListWidgetItem(label)
            it.setData(QtCore.Qt.ItemDataRole.UserRole, link)
            self.listLinks.addItem(it)

    def value(self) -> dict:
        return self.data

    def apply_to_data(self):
        # summary
        summary = [self.listSummary.item(i).text() for i in range(self.listSummary.count())]
        # bio
        bio = []
        for i in range(self.listBio.count()):
            it = self.listBio.item(i)
            obj = it.data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                bio.append(obj)
        # links
        links = []
        for i in range(self.listLinks.count()):
            it = self.listLinks.item(i)
            obj = it.data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                links.append(obj)

        self.data["greeting"] = self.edGreeting.text().strip()
        self.data["profile_image"] = self.fileProfile.value()
        self.data["name"] = self.edName.text().strip()
        self.data["title"] = self.edTitle.text().strip()
        self.data["summary"] = summary
        self.data["bio"] = bio
        self.data["hobbies"] = self.hobbiesEditor.html()
        self.data["links"] = links

        QtWidgets.QMessageBox.information(self, "OK", "Intro actualizada.")

    # helpers listas
    def _del_selected(self, lw: QtWidgets.QListWidget):
        for it in lw.selectedItems():
            lw.takeItem(lw.row(it))

    def _summary_add(self):
        dlg = HtmlItemDialog(self, title="Añadir párrafo (HTML)")
        if dlg.exec():
            self.listSummary.addItem(dlg.value())

    def _edit_html_item(self, lw: QtWidgets.QListWidget):
        it = lw.currentItem()
        if not it:
            return
        dlg = HtmlItemDialog(self, initial=it.text(), title="Editar HTML")
        if dlg.exec():
            it.setText(dlg.value())

    def _bio_add(self):
        dlg = BioDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(f"{obj['dates']} — {obj['text']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.listBio.addItem(it)

    def _bio_edit(self):
        it = self.listBio.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = BioDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj['dates']} — {obj['text']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    def _link_add(self):
        dlg = LinkDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(f"{obj['icon']} | {obj['text']} | {obj['url']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.listLinks.addItem(it)

    def _link_edit(self):
        it = self.listLinks.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = LinkDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj['icon']} | {obj['text']} | {obj['url']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)


# ========================= Tab: WORKS =====================================


class ProjectDialog(QtWidgets.QDialog):
    """Modal para crear/editar un project con:
    name (texto), description (HTML), links (lista modal), technologies (lista de texto)
    """

    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent)
        self.setWindowTitle("Añadir/Editar Proyecto")
        self.resize(900, 700)
        layout = QtWidgets.QVBoxLayout(self)

        form = QtWidgets.QFormLayout()
        self.edName = QtWidgets.QLineEdit()
        self.htmlDesc = HtmlEditor(show_preview=True)
        form.addRow("name:", self.edName)
        form.addRow("description (HTML):", self.htmlDesc)
        layout.addLayout(form)

        # links
        grpLinks = QtWidgets.QGroupBox("links")
        v1 = QtWidgets.QVBoxLayout(grpLinks)
        self.listLinks = QtWidgets.QListWidget()
        enable_reorder(self.listLinks)
        hb = QtWidgets.QHBoxLayout()
        btnAdd = QtWidgets.QPushButton("+")
        btnDel = QtWidgets.QPushButton("–")
        btnEdit = QtWidgets.QPushButton("Editar…")
        btnAdd.clicked.connect(self._link_add)
        btnDel.clicked.connect(lambda: self._del_selected(self.listLinks))
        btnEdit.clicked.connect(self._link_edit)
        hb.addWidget(btnAdd)
        hb.addWidget(btnDel)
        hb.addWidget(btnEdit)
        hb.addStretch(1)
        v1.addWidget(self.listLinks)
        v1.addLayout(hb)
        layout.addWidget(grpLinks)

        # technologies
        grpTech = QtWidgets.QGroupBox("technologies")
        v2 = QtWidgets.QVBoxLayout(grpTech)
        self.listTech = QtWidgets.QListWidget()
        enable_reorder(self.listTech)
        hb2 = QtWidgets.QHBoxLayout()
        btnAddT = QtWidgets.QPushButton("+")
        btnDelT = QtWidgets.QPushButton("–")
        btnEditT = QtWidgets.QPushButton("Editar…")
        btnAddT.clicked.connect(lambda: self.listTech.addItem("Tech"))
        btnDelT.clicked.connect(lambda: self._del_selected(self.listTech))
        btnEditT.clicked.connect(self._tech_edit)
        hb2.addWidget(btnAddT)
        hb2.addWidget(btnDelT)
        hb2.addWidget(btnEditT)
        hb2.addStretch(1)
        v2.addWidget(self.listTech)
        v2.addLayout(hb2)
        layout.addWidget(grpTech)

        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        layout.addWidget(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)

        if value:
            self.edName.setText(value.get("name", ""))
            self.htmlDesc.setHtml(value.get("description", ""))
            for link in value.get("links", []):
                it = QtWidgets.QListWidgetItem(
                    f"{link.get('icon', '')} | {link.get('text', '')} | {link.get('url', '')}"
                )
                it.setData(QtCore.Qt.ItemDataRole.UserRole, link)
                self.listLinks.addItem(it)
            for t in value.get("technologies", []):
                self.listTech.addItem(str(t))

    def _del_selected(self, lw: QtWidgets.QListWidget):
        for it in lw.selectedItems():
            lw.takeItem(lw.row(it))

    def _link_add(self):
        dlg = LinkDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(f"{obj['icon']} | {obj['text']} | {obj['url']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.listLinks.addItem(it)

    def _link_edit(self):
        it = self.listLinks.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = LinkDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj['icon']} | {obj['text']} | {obj['url']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    def _tech_edit(self):
        it = self.listTech.currentItem()
        if not it:
            return
        dlg = TextDialog(self, "tech", it.text())
        if dlg.exec():
            it.setText(dlg.value())

    def data(self) -> dict:
        links = []
        for i in range(self.listLinks.count()):
            obj = self.listLinks.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                links.append(obj)
        techs = [self.listTech.item(i).text() for i in range(self.listTech.count())]
        return {
            "name": self.edName.text().strip(),
            "description": self.htmlDesc.html(),
            "links": links,
            "technologies": techs,
        }


class WorkDialog(QtWidgets.QDialog):
    """Modal para crear/editar un work (con campos pedidos)."""

    def __init__(self, parent=None, value: Optional[dict] = None):
        super().__init__(parent)
        self.setWindowTitle("Añadir/Editar Trabajo")
        self.resize(900, 700)
        layout = QtWidgets.QVBoxLayout(self)

        form = QtWidgets.QFormLayout()
        self.edName = QtWidgets.QLineEdit()
        self.edTitle = QtWidgets.QLineEdit()
        self.edPeriod = QtWidgets.QLineEdit()
        self.fileThumb = FileSelect()
        form.addRow("name:", self.edName)
        form.addRow("title:", self.edTitle)
        form.addRow("period_time:", self.edPeriod)
        form.addRow("thumbnail:", self.fileThumb)
        layout.addLayout(form)

        # short_description (lista de textos simples)
        grpShort = QtWidgets.QGroupBox("short_description (lista de textos)")
        vs = QtWidgets.QVBoxLayout(grpShort)
        self.listShort = QtWidgets.QListWidget()
        enable_reorder(self.listShort)
        hb_s = QtWidgets.QHBoxLayout()
        btnAddS = QtWidgets.QPushButton("+")
        btnDelS = QtWidgets.QPushButton("–")
        btnEditS = QtWidgets.QPushButton("Editar…")
        btnAddS.clicked.connect(lambda: self.listShort.addItem(""))
        btnDelS.clicked.connect(lambda: self._del_selected(self.listShort))
        btnEditS.clicked.connect(self._edit_short)
        hb_s.addWidget(btnAddS)
        hb_s.addWidget(btnDelS)
        hb_s.addWidget(btnEditS)
        hb_s.addStretch(1)
        vs.addWidget(self.listShort)
        vs.addLayout(hb_s)
        layout.addWidget(grpShort)

        # full_description (lista HTML)
        grpFull = QtWidgets.QGroupBox("full_description (lista de párrafos HTML)")
        vf = QtWidgets.QVBoxLayout(grpFull)
        self.listFull = QtWidgets.QListWidget()
        hb_f = QtWidgets.QHBoxLayout()
        btnAddF = QtWidgets.QPushButton("+")
        btnDelF = QtWidgets.QPushButton("–")
        btnEditF = QtWidgets.QPushButton("Editar HTML…")
        btnAddF.clicked.connect(lambda: self.listFull.addItem("<p>...</p>"))
        btnDelF.clicked.connect(lambda: self._del_selected(self.listFull))
        btnEditF.clicked.connect(lambda: self._edit_html(self.listFull))
        hb_f.addWidget(btnAddF)
        hb_f.addWidget(btnDelF)
        hb_f.addWidget(btnEditF)
        hb_f.addStretch(1)
        vf.addWidget(self.listFull)
        vf.addLayout(hb_f)
        layout.addWidget(grpFull)

        # contribution (lista HTML)
        grpCon = QtWidgets.QGroupBox("contribution (lista de párrafos HTML)")
        vc = QtWidgets.QVBoxLayout(grpCon)
        self.listCon = QtWidgets.QListWidget()
        hb_c = QtWidgets.QHBoxLayout()
        btnAddC = QtWidgets.QPushButton("+")
        btnDelC = QtWidgets.QPushButton("–")
        btnEditC = QtWidgets.QPushButton("Editar HTML…")
        btnAddC.clicked.connect(lambda: self.listCon.addItem("<p>...</p>"))
        btnDelC.clicked.connect(lambda: self._del_selected(self.listCon))
        btnEditC.clicked.connect(lambda: self._edit_html(self.listCon))
        hb_c.addWidget(btnAddC)
        hb_c.addWidget(btnDelC)
        hb_c.addWidget(btnEditC)
        hb_c.addStretch(1)
        vc.addWidget(self.listCon)
        vc.addLayout(hb_c)
        layout.addWidget(grpCon)

        # links (lista con modal)
        grpLinks = QtWidgets.QGroupBox("links (icon, url, text)")
        vl = QtWidgets.QVBoxLayout(grpLinks)
        self.listLinks = QtWidgets.QListWidget()
        hb_l = QtWidgets.QHBoxLayout()
        btnAddL = QtWidgets.QPushButton("+")
        btnDelL = QtWidgets.QPushButton("–")
        btnEditL = QtWidgets.QPushButton("Editar…")
        btnAddL.clicked.connect(self._link_add)
        btnDelL.clicked.connect(lambda: self._del_selected(self.listLinks))
        btnEditL.clicked.connect(self._link_edit)
        hb_l.addWidget(btnAddL)
        hb_l.addWidget(btnDelL)
        hb_l.addWidget(btnEditL)
        hb_l.addStretch(1)
        vl.addWidget(self.listLinks)
        vl.addLayout(hb_l)
        layout.addWidget(grpLinks)

        # projects (lista con modal proyecto)
        grpProjects = QtWidgets.QGroupBox("projects")
        vp = QtWidgets.QVBoxLayout(grpProjects)
        self.listProjects = QtWidgets.QListWidget()
        hb_p = QtWidgets.QHBoxLayout()
        btnAddP = QtWidgets.QPushButton("+")
        btnDelP = QtWidgets.QPushButton("–")
        btnEditP = QtWidgets.QPushButton("Editar proyecto…")
        btnAddP.clicked.connect(self._proj_add)
        btnDelP.clicked.connect(lambda: self._del_selected(self.listProjects))
        btnEditP.clicked.connect(self._proj_edit)
        hb_p.addWidget(btnAddP)
        hb_p.addWidget(btnDelP)
        hb_p.addWidget(btnEditP)
        hb_p.addStretch(1)
        vp.addWidget(self.listProjects)
        vp.addLayout(hb_p)
        layout.addWidget(grpProjects)

        bb = QtWidgets.QDialogButtonBox(
            QtWidgets.QDialogButtonBox.StandardButton.Ok
            | QtWidgets.QDialogButtonBox.StandardButton.Cancel
        )
        layout.addWidget(bb)
        bb.accepted.connect(self.accept)
        bb.rejected.connect(self.reject)

        if value:
            self.edName.setText(value.get("name", ""))
            self.edTitle.setText(value.get("title", ""))
            self.edPeriod.setText(value.get("period_time", ""))
            self.fileThumb.setValue(value.get("thumbnail", ""))
            for s in value.get("short_description", []):
                self.listShort.addItem(str(s))
            for h in value.get("full_description", []):
                self.listFull.addItem(str(h))
            for h in value.get("contribution", []):
                self.listCon.addItem(str(h))
            for link in value.get("links", []):
                it = QtWidgets.QListWidgetItem(
                    f"{link.get('icon', '')} | {link.get('text', '')} | {link.get('url', '')}"
                )
                it.setData(QtCore.Qt.ItemDataRole.UserRole, link)
                self.listLinks.addItem(it)
            for p in value.get("projects", []):
                label = p.get("name", "(sin nombre)")
                it = QtWidgets.QListWidgetItem(label)
                it.setData(QtCore.Qt.ItemDataRole.UserRole, p)
                self.listProjects.addItem(it)

    # helpers
    def _del_selected(self, lw: QtWidgets.QListWidget):
        for it in lw.selectedItems():
            lw.takeItem(lw.row(it))

    def _edit_short(self):
        it = self.listShort.currentItem()
        if not it:
            return
        dlg = TextDialog(self, "texto", it.text())
        if dlg.exec():
            it.setText(dlg.value())

    def _edit_html(self, lw: QtWidgets.QListWidget):
        it = lw.currentItem()
        if not it:
            return
        dlg = HtmlItemDialog(self, initial=it.text(), title="Editar HTML")
        if dlg.exec():
            it.setText(dlg.value())

    def _link_add(self):
        dlg = LinkDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(f"{obj['icon']} | {obj['text']} | {obj['url']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.listLinks.addItem(it)

    def _link_edit(self):
        it = self.listLinks.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = LinkDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj['icon']} | {obj['text']} | {obj['url']}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    def _proj_add(self):
        dlg = ProjectDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(obj.get("name", "(sin nombre)"))
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.listProjects.addItem(it)

    def _proj_edit(self):
        it = self.listProjects.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = ProjectDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(obj.get("name", "(sin nombre)"))
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    def data(self) -> dict:
        # Construir dict del work
        short = [self.listShort.item(i).text() for i in range(self.listShort.count())]
        full = [self.listFull.item(i).text() for i in range(self.listFull.count())]
        con = [self.listCon.item(i).text() for i in range(self.listCon.count())]
        links = []
        for i in range(self.listLinks.count()):
            obj = self.listLinks.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                links.append(obj)
        projects = []
        for i in range(self.listProjects.count()):
            obj = self.listProjects.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                projects.append(obj)

        return {
            "name": self.edName.text().strip(),
            "title": self.edTitle.text().strip(),
            "short_description": short,
            "thumbnail": self.fileThumb.value(),
            "period_time": self.edPeriod.text().strip(),
            "full_description": full,
            "contribution": con,
            "links": links,
            "projects": projects,
            "technologies": [],  # puedes añadir otra sección si la necesitas a nivel work
            "images": [],
        }


class WorksTab(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.works: List[dict] = []

        h = QtWidgets.QHBoxLayout(self)

        # Lista izquierda
        left = QtWidgets.QWidget()
        vl = QtWidgets.QVBoxLayout(left)
        self.listWorks = QtWidgets.QListWidget()
        btnAdd = QtWidgets.QPushButton("Añadir trabajo…")
        btnDel = QtWidgets.QPushButton("Eliminar seleccionado")
        btnAdd.clicked.connect(self.add_work)
        btnDel.clicked.connect(self.delete_selected)
        vl.addWidget(QtWidgets.QLabel("Works"))
        vl.addWidget(self.listWorks)
        hb = QtWidgets.QHBoxLayout()
        hb.addWidget(btnAdd)
        hb.addWidget(btnDel)
        hb.addStretch(1)
        vl.addLayout(hb)

        # Formulario derecha (edición del seleccionado vía modal)
        right = QtWidgets.QWidget()
        vr = QtWidgets.QVBoxLayout(right)
        self.btnEdit = QtWidgets.QPushButton("Editar trabajo…")
        self.btnEdit.clicked.connect(self.edit_selected)
        vr.addWidget(self.btnEdit)
        vr.addStretch(1)
        h.addWidget(left, 2)
        h.addWidget(right, 1)

    def load(self, works: List[dict]):
        self.works = works or []
        self.refresh()

    def value(self) -> List[dict]:
        return self.works

    def refresh(self):
        self.listWorks.clear()
        for w in self.works:
            name = w.get("name", "")
            title = w.get("title", "")
            period = w.get("period_time", "")
            self.listWorks.addItem(f"{name} — {title} ({period})")

    def add_work(self):
        dlg = WorkDialog(self)
        if dlg.exec():
            self.works.append(dlg.data())
            self.refresh()
            self.listWorks.setCurrentRow(self.listWorks.count() - 1)

    def edit_selected(self):
        row = self.listWorks.currentRow()
        if row < 0:
            return
        dlg = WorkDialog(self, self.works[row])
        if dlg.exec():
            self.works[row] = dlg.data()
            self.refresh()
            self.listWorks.setCurrentRow(row)

    def delete_selected(self):
        row = self.listWorks.currentRow()
        if row < 0:
            return
        if (
            QtWidgets.QMessageBox.question(self, "Confirmar", "¿Eliminar trabajo seleccionado?")
            == QtWidgets.QMessageBox.StandardButton.Yes
        ):
            self.works.pop(row)
            self.refresh()


# ========================= Tab: EDUCATIONS (vacía) ========================


class EducationsTab(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.data: dict = {"university": [], "complementary": [], "languages": []}
        layout = QtWidgets.QVBoxLayout(self)
        self.tabs = QtWidgets.QTabWidget(self)
        layout.addWidget(self.tabs)
        # University
        self.uniList = QtWidgets.QListWidget()
        enable_reorder(self.uniList)
        self.tabs.addTab(
            self._build_list_page(self.uniList, self._uni_add, self._uni_edit, self._del_selected),
            "university",
        )
        # Complementary
        self.compList = QtWidgets.QListWidget()
        enable_reorder(self.compList)
        self.tabs.addTab(
            self._build_list_page(
                self.compList, self._comp_add, self._comp_edit, self._del_selected
            ),
            "complementary",
        )
        # Languages
        self.langList = QtWidgets.QListWidget()
        enable_reorder(self.langList)
        self.tabs.addTab(
            self._build_list_page(
                self.langList, self._lang_add, self._lang_edit, self._del_selected
            ),
            "languages",
        )

    def _build_list_page(
        self, lw: QtWidgets.QListWidget, add_cb, edit_cb, del_cb
    ) -> QtWidgets.QWidget:
        w = QtWidgets.QWidget()
        v = QtWidgets.QVBoxLayout(w)
        v.addWidget(lw)
        hb = QtWidgets.QHBoxLayout()
        bAdd = QtWidgets.QPushButton("Añadir…")
        bDel = QtWidgets.QPushButton("Eliminar")
        bEdit = QtWidgets.QPushButton("Editar…")
        bAdd.clicked.connect(add_cb)
        bDel.clicked.connect(lambda: del_cb(lw))
        bEdit.clicked.connect(edit_cb)
        hb.addWidget(bAdd)
        hb.addWidget(bDel)
        hb.addWidget(bEdit)
        hb.addStretch(1)
        v.addLayout(hb)
        return w

    def _del_selected(self, lw: QtWidgets.QListWidget):
        for it in lw.selectedItems():
            lw.takeItem(lw.row(it))

    # --- University
    def _uni_add(self):
        dlg = UniversityItemDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(
                f"{obj.get('university_name', '')} — {obj.get('title', '')}"
            )
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.uniList.addItem(it)

    def _uni_edit(self):
        it = self.uniList.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = UniversityItemDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj.get('university_name', '')} — {obj.get('title', '')}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    # --- Complementary
    def _comp_add(self):
        dlg = ComplementaryItemDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(f"{obj.get('institution', '')} — {obj.get('title', '')}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.compList.addItem(it)

    def _comp_edit(self):
        it = self.compList.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = ComplementaryItemDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj.get('institution', '')} — {obj.get('title', '')}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    # --- Languages
    def _lang_add(self):
        dlg = LanguageItemDialog(self)
        if dlg.exec():
            obj = dlg.data()
            it = QtWidgets.QListWidgetItem(
                f"{obj.get('language', '')} — spoken:{obj.get('spoken', '')}"
            )
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)
            self.langList.addItem(it)

    def _lang_edit(self):
        it = self.langList.currentItem()
        if not it:
            return
        prev = it.data(QtCore.Qt.ItemDataRole.UserRole) or {}
        dlg = LanguageItemDialog(self, prev)
        if dlg.exec():
            obj = dlg.data()
            it.setText(f"{obj.get('language', '')} — spoken:{obj.get('spoken', '')}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, obj)

    # IO
    def load(self, educations: dict):
        self.data = ensure_educations_defaults(educations)
        # Rellenar listas
        self.uniList.clear()
        for u in self.data["university"]:
            it = QtWidgets.QListWidgetItem(f"{u.get('university_name', '')} — {u.get('title', '')}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, u)
            self.uniList.addItem(it)
        self.compList.clear()
        for c in self.data["complementary"]:
            it = QtWidgets.QListWidgetItem(f"{c.get('institution', '')} — {c.get('title', '')}")
            it.setData(QtCore.Qt.ItemDataRole.UserRole, c)
            self.compList.addItem(it)
        self.langList.clear()
        for language in self.data["languages"]:
            it = QtWidgets.QListWidgetItem(
                f"{language.get('language', '')} — spoken:{language.get('spoken', '')}"
            )
            it.setData(QtCore.Qt.ItemDataRole.UserRole, language)
            self.langList.addItem(it)

    def value(self) -> dict:
        # Extrae objetos desde los UserRole
        out = {"university": [], "complementary": [], "languages": []}
        for i in range(self.uniList.count()):
            obj = self.uniList.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                out["university"].append(obj)
        for i in range(self.compList.count()):
            obj = self.compList.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                out["complementary"].append(obj)
        for i in range(self.langList.count()):
            obj = self.langList.item(i).data(QtCore.Qt.ItemDataRole.UserRole)
            if isinstance(obj, dict):
                out["languages"].append(obj)
        return out


# ========================= Ventana principal ==============================


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("CV JSON Editor[*]")
        self.resize(1280, 860)
        self.current_path: Optional[Path] = None
        self.data: dict[str, Any] = {}
        self._dirty = False

        self._build_menu()

        self.tabs = QtWidgets.QTabWidget()
        self.tabIntro = IntroTab()
        self.tabWorks = WorksTab()
        self.tabEdu = EducationsTab()
        self.tabs.addTab(self.tabIntro, "Intro")
        self.tabs.addTab(self.tabWorks, "Works")
        self.tabs.addTab(self.tabEdu, "Educations")
        self.setCentralWidget(self.tabs)
        # Cambios en tabs → marcar dirty
        self._wire_dirty_signals()

    def _set_dirty(self, yes: bool = True):
        self._dirty = bool(yes)
        self.setWindowModified(self._dirty)

    def _wire_dirty_signals(self):
        # Marca el documento como modificado ante eventos razonables.
        def mark():
            self._set_dirty(True)

        # Intro
        for w in (
            self.tabIntro.edGreeting,
            self.tabIntro.edName,
            self.tabIntro.edTitle,
            self.tabIntro.fileProfile.edit,
        ):
            w.textChanged.connect(mark)
        self.tabIntro.listSummary.itemChanged.connect(mark)
        self.tabIntro.listBio.itemChanged.connect(mark)
        self.tabIntro.listLinks.itemChanged.connect(mark)
        self.tabIntro.hobbiesEditor.textChanged.connect(lambda _: mark())
        # Works (listas)
        self.tabWorks.listWorks.itemChanged.connect(mark)
        # Educations
        for lw in (self.tabEdu.uniList, self.tabEdu.compList, self.tabEdu.langList):
            lw.itemChanged.connect(mark)

    def _build_menu(self):
        bar = self.menuBar()
        m = bar.addMenu("&Archivo")
        actOpen = QtGui.QAction("Abrir…", self)
        actSave = QtGui.QAction("Guardar", self)
        actSaveAs = QtGui.QAction("Guardar como…", self)
        actExit = QtGui.QAction("Salir", self)
        # Atajos
        actOpen.setShortcut(QtGui.QKeySequence.StandardKey.Open)
        actSave.setShortcut(QtGui.QKeySequence.StandardKey.Save)
        actSaveAs.setShortcut(QtGui.QKeySequence.StandardKey.SaveAs)
        actOpen.triggered.connect(self.open_file)
        actSave.triggered.connect(self.save_file)
        actSaveAs.triggered.connect(self.save_file_as)
        actExit.triggered.connect(self.close)
        m.addAction(actOpen)
        m.addAction(actSave)
        m.addAction(actSaveAs)
        m.addSeparator()
        m.addAction(actExit)

        # Menú Herramientas → Validar esquema
        tools = bar.addMenu("&Herramientas")
        actValidate = QtGui.QAction("Validar esquema…", self)
        actValidate.triggered.connect(self.validate_schema)
        tools.addAction(actValidate)

    # IO
    def open_file(self):
        if self._dirty:
            resp = QtWidgets.QMessageBox.question(
                self,
                "Cambios sin guardar",
                "Hay cambios sin guardar. ¿Continuar y descartar cambios?",
            )
            if resp != QtWidgets.QMessageBox.StandardButton.Yes:
                return
        fn, _ = QtWidgets.QFileDialog.getOpenFileName(self, "Abrir JSON", "", "JSON (*.json)")
        if not fn:
            return
        try:
            root = load_json(Path(fn))
            if not isinstance(root, dict):
                raise ValueError("La raíz del JSON debe ser un objeto.")
            ensure_paths(root)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"No se pudo cargar: {e}")
            return
        self.current_path = Path(fn)
        self.data = root
        # Cargar en tabs
        self.tabIntro.load(self.data["intro"])
        self.tabWorks.load(self.data["works"])
        self.tabEdu.load(self.data["educations"])
        self.statusBar().showMessage(f"Cargado: {fn}")
        self._set_dirty(False)

    def save_file(self):
        if not self.current_path:
            return self.save_file_as()
        # Recoger de tabs
        self.data["intro"] = self.tabIntro.value()
        self.data["works"] = self.tabWorks.value()
        self.data["educations"] = self.tabEdu.value()
        try:
            save_json(self.current_path, self.data)
            self.statusBar().showMessage(f"Guardado: {self.current_path}")
            self._set_dirty(False)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Error", f"No se pudo guardar: {e}")

    def save_file_as(self):
        fn, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Guardar JSON", "", "JSON (*.json)")
        if not fn:
            return
        self.current_path = Path(fn)
        self.save_file()

    def closeEvent(self, ev: QtGui.QCloseEvent) -> None:
        if self._dirty:
            resp = QtWidgets.QMessageBox.question(
                self,
                "Salir",
                "Hay cambios sin guardar. ¿Salir igualmente?",
            )
            if resp != QtWidgets.QMessageBox.StandardButton.Yes:
                ev.ignore()
                return
        return super().closeEvent(ev)

    def validate_schema(self):
        if not HAS_JSONSCHEMA:
            QtWidgets.QMessageBox.information(
                self,
                "Validación no disponible",
                "Instala jsonschema para validar:  pip install jsonschema",
            )
            return
        # Recolectar datos actuales (sin guardar a disco)
        current = {
            "intro": self.tabIntro.value(),
            "works": self.tabWorks.value(),
            "educations": self.tabEdu.value(),
        }
        schema = {
            "type": "object",
            "required": ["intro", "works", "educations"],
            "properties": {
                "intro": {
                    "type": "object",
                    "properties": {
                        "greeting": {"type": "string"},
                        "profile_image": {"type": "string"},
                        "name": {"type": "string"},
                        "title": {"type": "string"},
                        "summary": {"type": "array", "items": {"type": "string"}},
                        "bio": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "dates": {"type": "string"},
                                    "text": {"type": "string"},
                                },
                                "required": ["text"],
                            },
                        },
                        "hobbies": {"type": "string"},
                        "links": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "icon": {"type": "string"},
                                    "url": {"type": "string"},
                                    "text": {"type": "string"},
                                },
                                "required": ["url", "text"],
                            },
                        },
                    },
                },
                "works": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {"type": "string"},
                            "title": {"type": "string"},
                            "short_description": {"type": "array", "items": {"type": "string"}},
                            "thumbnail": {"type": "string"},
                            "period_time": {"type": "string"},
                            "full_description": {"type": "array", "items": {"type": "string"}},
                            "contribution": {"type": "array", "items": {"type": "string"}},
                            "links": {"type": "array"},
                            "projects": {"type": "array"},
                        },
                        "required": ["name", "title"],
                    },
                },
                "educations": {
                    "type": "object",
                    "properties": {
                        "university": {"type": "array"},
                        "complementary": {"type": "array"},
                        "languages": {"type": "array"},
                    },
                },
            },
        }
        try:
            jsonschema.validate(current, schema)  # type: ignore
            QtWidgets.QMessageBox.information(self, "OK", "El JSON cumple el esquema básico.")
        except Exception as e:
            QtWidgets.QMessageBox.critical(self, "Esquema inválido", str(e))
